<?php

namespace PHPCRProxies\__CG__\Symfony\Cmf\Bundle\ContentBundle\Doctrine\Phpcr;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class StaticContent extends \Symfony\Cmf\Bundle\ContentBundle\Doctrine\Phpcr\StaticContent implements \Doctrine\Common\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'parent', 'name', 'node', 'publishable', 'publishStartDate', 'publishEndDate', 'locale', 'routes', 'menuNodes', 'tags', 'extras', 'additionalInfoBlock', 'id', 'title', 'body');
        }

        return array('__isInitialized__', 'parent', 'name', 'node', 'publishable', 'publishStartDate', 'publishEndDate', 'locale', 'routes', 'menuNodes', 'tags', 'extras', 'additionalInfoBlock', 'id', 'title', 'body');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (StaticContent $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setParent($parent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', array($parent));

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', array());

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getNode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNode', array());

        return parent::getNode();
    }

    /**
     * {@inheritDoc}
     */
    public function getLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocale', array());

        return parent::getLocale();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocale', array($locale));

        return parent::setLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getTags()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTags', array());

        return parent::getTags();
    }

    /**
     * {@inheritDoc}
     */
    public function setTags($tags)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTags', array($tags));

        return parent::setTags($tags);
    }

    /**
     * {@inheritDoc}
     */
    public function getAdditionalInfoBlock()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdditionalInfoBlock', array());

        return parent::getAdditionalInfoBlock();
    }

    /**
     * {@inheritDoc}
     */
    public function setAdditionalInfoBlock($block)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAdditionalInfoBlock', array($block));

        return parent::setAdditionalInfoBlock($block);
    }

    /**
     * {@inheritDoc}
     */
    public function setPublishable($publishable)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublishable', array($publishable));

        return parent::setPublishable($publishable);
    }

    /**
     * {@inheritDoc}
     */
    public function isPublishable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPublishable', array());

        return parent::isPublishable();
    }

    /**
     * {@inheritDoc}
     */
    public function getPublishStartDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublishStartDate', array());

        return parent::getPublishStartDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublishStartDate(\DateTime $publishStartDate = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublishStartDate', array($publishStartDate));

        return parent::setPublishStartDate($publishStartDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublishEndDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublishEndDate', array());

        return parent::getPublishEndDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublishEndDate(\DateTime $publishEndDate = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublishEndDate', array($publishEndDate));

        return parent::setPublishEndDate($publishEndDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getExtras()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExtras', array());

        return parent::getExtras();
    }

    /**
     * {@inheritDoc}
     */
    public function getExtra($name, $default = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExtra', array($name, $default));

        return parent::getExtra($name, $default);
    }

    /**
     * {@inheritDoc}
     */
    public function setExtras(array $extras)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExtras', array($extras));

        return parent::setExtras($extras);
    }

    /**
     * {@inheritDoc}
     */
    public function setExtra($name, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExtra', array($name, $value));

        return parent::setExtra($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function addRoute($route)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRoute', array($route));

        return parent::addRoute($route);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRoute($route)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRoute', array($route));

        return parent::removeRoute($route);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoutes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoutes', array());

        return parent::getRoutes();
    }

    /**
     * {@inheritDoc}
     */
    public function addMenuNode(\Knp\Menu\NodeInterface $menu)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMenuNode', array($menu));

        return parent::addMenuNode($menu);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMenuNode(\Knp\Menu\NodeInterface $menu)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMenuNode', array($menu));

        return parent::removeMenuNode($menu);
    }

    /**
     * {@inheritDoc}
     */
    public function getMenuNodes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMenuNodes', array());

        return parent::getMenuNodes();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', array());

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', array($title));

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getBody()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBody', array());

        return parent::getBody();
    }

    /**
     * {@inheritDoc}
     */
    public function setBody($body)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBody', array($body));

        return parent::setBody($body);
    }

}
